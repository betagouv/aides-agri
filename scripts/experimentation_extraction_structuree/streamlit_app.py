import os
import streamlit as st

from data_extraction.schemas.pydantic_schema import DispositifAide
from data_extraction.core.engine import Engine

# Configuration de la page
st.set_page_config(
    page_title="Extraction d'Aides Agricoles",
    page_icon="üåæ",
    layout="wide"
)

st.title("üåæ Extraction d'Aides Agricoles")
st.markdown("---")

# D√©couverte automatique des PDFs dans le dossier sample_pdf √† c√¥t√© de ce fichier
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
SAMPLE_DIR = os.path.join(BASE_DIR, "sample_pdf")
PDF_FILES = {}
if os.path.isdir(SAMPLE_DIR):
    for fname in sorted(os.listdir(SAMPLE_DIR)):
        if fname.lower().endswith(".pdf"):
            PDF_FILES[fname] = os.path.join(SAMPLE_DIR, fname)

# Sidebar pour la configuration
st.sidebar.header("Configuration")

# S√©lection du PDF
if PDF_FILES:
    selected_pdf = st.sidebar.selectbox(
        "Choisir un PDF:",
        list(PDF_FILES.keys())
    )
    pdf_path = PDF_FILES[selected_pdf]
else:
    st.sidebar.warning("Aucun fichier PDF trouv√© dans sample_pdf/")
    selected_pdf = None
    pdf_path = None

# S√©lection de la m√©thode d'extraction de texte
st.sidebar.subheader("M√©thode d'extraction de texte")
extraction_method = st.sidebar.selectbox(
    "Choisir la m√©thode d'extraction:",
    ["docling", "pdf_miner", "langchain", "pypdf"],
    help="Choisissez la m√©thode pour extraire le texte du PDF"
)

# S√©lection du mod√®le pour l'extraction structur√©e
st.sidebar.subheader("Mod√®le d'extraction structur√©e")
model_choice = st.sidebar.radio(
    "Choisir le mod√®le:",
    ["API Albert", "Mod√®le Local (Ollama)"],
    help="Choisissez entre l'API Albert ou un mod√®le local via Ollama"
)

# Configuration API Albert
if model_choice == "API Albert":
    st.sidebar.subheader("Configuration API Albert")
    model_name = st.sidebar.selectbox(
        "Mod√®le Albert:",
        ["albert-small", "albert-medium", "albert-large"],
        help="Choisissez le mod√®le Albert √† utiliser"
    )

# Configuration mod√®le local
if model_choice == "Mod√®le Local (Ollama)":
    st.sidebar.subheader("Configuration Mod√®le Local")
    local_model = st.sidebar.selectbox(
        "Mod√®le Ollama:",
        ["gemma3:4b", "llama3.1:8b", "mistral:7b"],
        help="Choisissez le mod√®le Ollama √† utiliser"
    )

# Boutons d'action
col1, col2 = st.columns(2)

with col1:
    extract_text_btn = st.button("üìÑ Extraire le texte du PDF", type="primary")

with col2:
    extract_structured_btn = st.button("ü§ñ Extraction structur√©e", type="secondary")

# Zone d'affichage des r√©sultats
st.markdown("---")
st.subheader("R√©sultats")

# Initialisation des variables de session
if 'extracted_text' not in st.session_state:
    st.session_state.extracted_text = None
if 'structured_output' not in st.session_state:
    st.session_state.structured_output = None
if 'last_extraction_method' not in st.session_state:
    st.session_state.last_extraction_method = None
if 'last_pdf_selected' not in st.session_state:
    st.session_state.last_pdf_selected = None

# Affichage persistant du texte extrait
if st.session_state.extracted_text is not None:
    st.markdown("### üìÑ Texte extrait")
    st.info(f"‚úÖ Texte extrait depuis **{st.session_state.last_pdf_selected}** avec la m√©thode **{st.session_state.last_extraction_method}** ({len(st.session_state.extracted_text)} caract√®res)")
    
    with st.expander("üìù Texte extrait (premiers 1000 caract√®res)", expanded=False):
        st.text(st.session_state.extracted_text[:1000] + "..." if len(st.session_state.extracted_text) > 1000 else st.session_state.extracted_text)
    
    # Bouton pour r√©extraire si n√©cessaire
    if st.button("üîÑ R√©extraire le texte"):
        st.session_state.extracted_text = None
        st.rerun()

# Fonction pour extraire le texte
def extract_text_from_pdf():
    try:
        st.info(f"Extraction du texte avec {extraction_method}...")
        parser_key = "pdfminer" if extraction_method == "pdf_miner" else extraction_method
        if not pdf_path:
            st.error("Aucun PDF s√©lectionn√©")
            return
        engine = Engine(schema=DispositifAide, parser=parser_key)
        text = engine.parse(pdf_path)
        st.session_state.extracted_text = text
        st.session_state.last_extraction_method = extraction_method
        st.session_state.last_pdf_selected = selected_pdf
        st.success(f"‚úÖ Texte extrait avec succ√®s! ({len(text)} caract√®res)")
        st.rerun()
    except Exception as e:
        st.error(f"‚ùå Erreur lors de l'extraction: {str(e)}")

def extract_structured():
    try:
        parser_key = "pdfminer" if extraction_method == "pdf_miner" else extraction_method
        selected_model = model_name if model_choice == "API Albert" else local_model
        st.info("ü§ñ Extraction structur√©e en cours...")
        engine = Engine(
            schema=DispositifAide,
            parser=parser_key,
            model_name=selected_model,
            temperature=0.1,
            max_completion_tokens=2000,
        )
        if not pdf_path:
            st.error("Aucun PDF s√©lectionn√©")
            return
        if st.session_state.extracted_text:
            result = engine.generate(st.session_state.extracted_text[:50000])
        else:
            result = engine.run(pdf_path)
        content_json = result.get_json()
        if isinstance(content_json, str):
            structured_data = DispositifAide.model_validate_json(content_json)
        else:
            structured_data = DispositifAide.model_validate(content_json)
        st.session_state.structured_output = structured_data
        st.success("‚úÖ Extraction structur√©e r√©ussie!")
        st.rerun()
    except Exception as e:
        st.error(f"‚ùå Erreur lors de l'extraction structur√©e: {str(e)}")

# Gestion des clics sur les boutons
if extract_text_btn:
    extract_text_from_pdf()

if extract_structured_btn:
    extract_structured()

# Affichage des r√©sultats structur√©s
if st.session_state.structured_output is not None:
    st.markdown("---")
    st.subheader("üìä R√©sultat de l'extraction structur√©e")
    
    # Affichage en format JSON
    with st.expander("üìã Donn√©es structur√©es (JSON)"):
        json_data = st.session_state.structured_output.model_dump()
        st.json(json_data)
    
    # Affichage format√©
    st.markdown("### üìù Informations extraites")
    
    data = st.session_state.structured_output
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown(f"**Titre:** {data.titre}")
        st.markdown(f"**Description:** {data.description}")
        
        if data.eligibilite:
            st.markdown("**Crit√®res d'√©ligibilit√©:**")
            for critere in data.eligibilite:
                st.markdown(f"- {critere}")
    
    with col2:
        if data.types_aides:
            st.markdown("**Types d'aides:**")
            for aide in data.types_aides:
                st.markdown(f"- {aide}")
        
        if data.porteurs:
            st.markdown("**Porteurs:**")
            for porteur in data.porteurs:
                roles_str = ", ".join(porteur.roles)
                st.markdown(f"- {porteur.nom} ({roles_str})")
    
    # Informations suppl√©mentaires
    if data.cibles:
        st.markdown("**B√©n√©ficiaires cibl√©s:**")
        for cible in data.cibles:
            st.markdown(f"- {cible}")
    
    if data.eligibilite_geographique:
        st.markdown(f"**Couverture g√©ographique:** {data.eligibilite_geographique}")
    
    if data.date_ouverture:
        st.markdown(f"**Date d'ouverture:** {data.date_ouverture.strftime('%d/%m/%Y')}")
    
    if data.date_cloture:
        st.markdown(f"**Date de cl√¥ture:** {data.date_cloture.strftime('%d/%m/%Y')}")

# Footer
st.markdown("---")
st.markdown("üåæ **Extraction d'Aides Agricoles** - Outil d'extraction et d'analyse de documents PDF")
